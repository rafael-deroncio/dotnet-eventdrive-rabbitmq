-- Drop existing tables if they exist
DROP TABLE IF EXISTS CERTIFICATE_FILES;
DROP TABLE IF EXISTS CERTIFICATES;
DROP TABLE IF EXISTS PROCCESS_EVENT;
DROP TABLE IF EXISTS PROCCESS_EVENT_STATUS;

-- Drop existing sequences if they exist
DROP SEQUENCE IF EXISTS seq_certificates;
DROP SEQUENCE IF EXISTS seq_certificates_files;
DROP SEQUENCE IF EXISTS seq_event_proccess;

-- Create sequences
CREATE SEQUENCE seq_certificates;
CREATE SEQUENCE seq_certificates_files;
CREATE SEQUENCE seq_event_proccess;

-- Set the starting value of the sequences to a random number
SELECT setval('seq_certificates', round(random() * (99999 - 10000) + 10000)::bigint);
SELECT setval('seq_certificates_files', round(random() * (99999 - 10000) + 10000)::bigint);
SELECT setval('seq_event_proccess', round(random() * (99999 - 10000) + 10000)::bigint);

-- Create the certificates table with random sequence
CREATE TABLE CERTIFICATES (
  CODE_CERTIFICATE INTEGER PRIMARY KEY DEFAULT nextval('seq_certificates'),
  STUDANT_NAME VARCHAR(100) NOT NULL,
  STUDANT_DOCUMENT VARCHAR(100) NOT NULL,
  STUDANT_REGISTRATION VARCHAR(50) NOT NULL,
  COURSE VARCHAR(100) NOT NULL,
  WORKLOAD INTEGER NOT NULL,
  COMPLETATION DATE NOT NULL,
  UTILIZATION NUMERIC(5, 2) NOT NULL,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Create the file_details table with random sequence
CREATE TABLE CERTIFICATE_FILES (
  CODE_CERTIFICATE_FILE INTEGER PRIMARY KEY DEFAULT nextval('seq_certificates_files'),
  CODE_CERTIFICATE INTEGER NOT NULL,
  FILE TEXT NOT NULL,
  TYPE VARCHAR(50) NOT NULL,
  PATH VARCHAR(255) NOT NULL,
  SIZE INTEGER NOT NULL,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT FK_CERTIFICATE FOREIGN KEY (CODE_CERTIFICATE) REFERENCES CERTIFICATES (CODE_CERTIFICATE) ON DELETE CASCADE
);

-- Create the event_proccess_status table with random sequence
CREATE TABLE PROCCESS_EVENT_STATUS (
  CODE_STATUS INTEGER PRIMARY KEY,
  DESCRIPTION VARCHAR(50) NOT NULL,
  ACTIVE BOOLEAN NOT NULL DEFAULT false,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT CK_STATUS_DESCRIPTION CHECK (DESCRIPTION IN ('OnProcecess', 'Pending', 'Success', 'Error'))
);

-- Insert initial values into event_proccess_status with IDs
INSERT INTO PROCCESS_EVENT_STATUS (CODE_STATUS, DESCRIPTION, ACTIVE)
VALUES 
    (1, 'OnProcecess', true),
    (2, 'Pending', true),
    (3, 'Success', true),
    (4, 'Error', true);

-- Create the event_proccess table with random sequence
CREATE TABLE PROCCESS_EVENT (
  CODE_PROCCESS_EVENT INTEGER PRIMARY KEY DEFAULT nextval('seq_event_proccess'),
  CODE_STATUS INTEGER NOT NULL,
  ERROR TEXT,
  ATTEMPS INTEGER NOT NULL DEFAULT 0,
  JSON TEXT NOT NULL,
  FINISHED BOOLEAN NOT NULL DEFAULT false,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  UPDATED_AT TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT FK_PROCCESS_EVENT_STATUS FOREIGN KEY (CODE_STATUS) REFERENCES PROCCESS_EVENT_STATUS (CODE_STATUS) ON DELETE CASCADE
);
